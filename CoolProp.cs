/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CoolProp {
  public static bool ValidNumber(double x) {
    bool ret = CoolPropPINVOKE.ValidNumber(x);
    return ret;
  }

  public static SWIGTYPE_p_std__string strlstrip(SWIGTYPE_p_std__string s) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(CoolPropPINVOKE.strlstrip(SWIGTYPE_p_std__string.getCPtr(s)), false);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__string strrstrip(SWIGTYPE_p_std__string s) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(CoolPropPINVOKE.strrstrip(SWIGTYPE_p_std__string.getCPtr(s)), false);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__string strstrip(SWIGTYPE_p_std__string s) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(CoolPropPINVOKE.strstrip(SWIGTYPE_p_std__string.getCPtr(s)), false);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_file_contents(string filename) {
    string ret = CoolPropPINVOKE.get_file_contents(filename);
    return ret;
  }

  public static string format(string fmt) {
    string ret = CoolPropPINVOKE.format(fmt);
    return ret;
  }

  public static SWIGTYPE_p_std__vectorT_std__string_t strsplit(string s, char del) {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(CoolPropPINVOKE.strsplit(s, del), true);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string upper(string str_) {
    string ret = CoolPropPINVOKE.upper(str_);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string strjoin(SWIGTYPE_p_std__vectorT_std__string_t strings, string delim) {
    string ret = CoolPropPINVOKE.strjoin(SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(strings), delim);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MatInv_2(SWIGTYPE_p_a_2__double A, SWIGTYPE_p_a_2__double B) {
    CoolPropPINVOKE.MatInv_2(SWIGTYPE_p_a_2__double.getCPtr(A), SWIGTYPE_p_a_2__double.getCPtr(B));
  }

  public static double root_sum_square(SWIGTYPE_p_std__vectorT_double_t x) {
    double ret = CoolPropPINVOKE.root_sum_square(SWIGTYPE_p_std__vectorT_double_t.getCPtr(x));
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double interp1d(SWIGTYPE_p_std__vectorT_double_t x, SWIGTYPE_p_std__vectorT_double_t y, double x0) {
    double ret = CoolPropPINVOKE.interp1d(SWIGTYPE_p_std__vectorT_double_t.getCPtr(x), SWIGTYPE_p_std__vectorT_double_t.getCPtr(y), x0);
    return ret;
  }

  public static double powInt(double x, int y) {
    double ret = CoolPropPINVOKE.powInt(x, y);
    return ret;
  }

  public static double QuadInterp(double x0, double x1, double x2, double f0, double f1, double f2, double x) {
    double ret = CoolPropPINVOKE.QuadInterp(x0, x1, x2, f0, f1, f2, x);
    return ret;
  }

  public static double CubicInterp(double x0, double x1, double x2, double x3, double f0, double f1, double f2, double f3, double x) {
    double ret = CoolPropPINVOKE.CubicInterp(x0, x1, x2, x3, f0, f1, f2, f3, x);
    return ret;
  }

  public static void solve_cubic(double a, double b, double c, double d, SWIGTYPE_p_double x0, SWIGTYPE_p_double x1, SWIGTYPE_p_double x2) {
    CoolPropPINVOKE.solve_cubic(a, b, c, d, SWIGTYPE_p_double.getCPtr(x0), SWIGTYPE_p_double.getCPtr(x1), SWIGTYPE_p_double.getCPtr(x2));
  }

  public static double min3(double x1, double x2, double x3) {
    double ret = CoolPropPINVOKE.min3(x1, x2, x3);
    return ret;
  }

  public static double max3(double x1, double x2, double x3) {
    double ret = CoolPropPINVOKE.max3(x1, x2, x3);
    return ret;
  }

  public static bool double_equal(double a, double b) {
    bool ret = CoolPropPINVOKE.double_equal(a, b);
    return ret;
  }

  public static int Kronecker_delta(int i, int j) {
    int ret = CoolPropPINVOKE.Kronecker_delta(i, j);
    return ret;
  }

  public static double Props1SI(string FluidName, string Output) {
    double ret = CoolPropPINVOKE.Props1SI(FluidName, Output);
    return ret;
  }

  public static double PropsSI(string Output, string Name1, double Prop1, string Name2, double Prop2, string Ref) {
    double ret = CoolPropPINVOKE.PropsSI(Output, Name1, Prop1, Name2, Prop2, Ref);
    return ret;
  }

  public static double PropsS(string Output, string Name1, double Prop1, string Name2, double Prop2, string Ref) {
    double ret = CoolPropPINVOKE.PropsS(Output, Name1, Prop1, Name2, Prop2, Ref);
    return ret;
  }

  public static double Props(string Output, char Name1, double Prop1, char Name2, double Prop2, string Ref) {
    double ret = CoolPropPINVOKE.Props(Output, Name1, Prop1, Name2, Prop2, Ref);
    return ret;
  }

  public static double Props1(string FluidName, string Output) {
    double ret = CoolPropPINVOKE.Props1(FluidName, Output);
    return ret;
  }

  public static int IsFluidType(string Ref, string Type) {
    int ret = CoolPropPINVOKE.IsFluidType(Ref, Type);
    return ret;
  }

  public static double DerivTerms(string Term, double T, double rho, string Ref) {
    double ret = CoolPropPINVOKE.DerivTerms(Term, T, rho, Ref);
    return ret;
  }

  public static int Phase(string Fluid, double T, double p, string Phase_str) {
    int ret = CoolPropPINVOKE.Phase(Fluid, T, p, Phase_str);
    return ret;
  }

  public static int Phase_Trho(string Fluid, double T, double p, string Phase_str) {
    int ret = CoolPropPINVOKE.Phase_Trho(Fluid, T, p, Phase_str);
    return ret;
  }

  public static int Phase_Tp(string Fluid, double T, double rho, string Phase_str) {
    int ret = CoolPropPINVOKE.Phase_Tp(Fluid, T, rho, Phase_str);
    return ret;
  }

  public static void set_phase(string Phase_str) {
    CoolPropPINVOKE.set_phase(Phase_str);
  }

  public static double fromSI(string input, double value, string new_system) {
    double ret = CoolPropPINVOKE.fromSI(input, value, new_system);
    return ret;
  }

  public static double toSI(string input, double value, string old_system) {
    double ret = CoolPropPINVOKE.toSI(input, value, old_system);
    return ret;
  }

  public static string get_global_param_string(string ParamName) {
    string ret = CoolPropPINVOKE.get_global_param_string(ParamName);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_fluid_param_string(string FluidName, string ParamName) {
    string ret = CoolPropPINVOKE.get_fluid_param_string(FluidName, ParamName);
    if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int set_reference_stateS(string Ref, string reference_state) {
    int ret = CoolPropPINVOKE.set_reference_stateS(Ref, reference_state);
    return ret;
  }

  public static int set_reference_stateD(string Ref, double T, double rho, double h0, double s0) {
    int ret = CoolPropPINVOKE.set_reference_stateD(Ref, T, rho, h0, s0);
    return ret;
  }

  public static double IPropsSI(int iOutput, int iName1, double Prop1, int iName2, double Prop2, int iFluid) {
    double ret = CoolPropPINVOKE.IPropsSI(iOutput, iName1, Prop1, iName2, Prop2, iFluid);
    return ret;
  }

  public static double IProps(int iOutput, int iName1, double Prop1, int iName2, double Prop2, int iFluid) {
    double ret = CoolPropPINVOKE.IProps(iOutput, iName1, Prop1, iName2, Prop2, iFluid);
    return ret;
  }

  public static double F2K(double T_F) {
    double ret = CoolPropPINVOKE.F2K(T_F);
    return ret;
  }

  public static double K2F(double T_K) {
    double ret = CoolPropPINVOKE.K2F(T_K);
    return ret;
  }

  public static int get_standard_unit_system() {
    int ret = CoolPropPINVOKE.get_standard_unit_system();
    return ret;
  }

  public static void set_standard_unit_system(int val) {
    CoolPropPINVOKE.set_standard_unit_system(val);
  }

  public static int get_param_index(string param) {
    int ret = CoolPropPINVOKE.get_param_index(param);
    return ret;
  }

  public static int get_Fluid_index(string param) {
    int ret = CoolPropPINVOKE.get_Fluid_index(param);
    return ret;
  }

  public static int redirect_stdout(string file) {
    int ret = CoolPropPINVOKE.redirect_stdout(file);
    return ret;
  }

  public static int get_debug_level() {
    int ret = CoolPropPINVOKE.get_debug_level();
    return ret;
  }

  public static void set_debug_level(int level) {
    CoolPropPINVOKE.set_debug_level(level);
  }

  public static bool enable_TTSE_LUT(string FluidName) {
    bool ret = CoolPropPINVOKE.enable_TTSE_LUT(FluidName);
    return ret;
  }

  public static bool isenabled_TTSE_LUT(string FluidName) {
    bool ret = CoolPropPINVOKE.isenabled_TTSE_LUT(FluidName);
    return ret;
  }

  public static bool disable_TTSE_LUT(string FluidName) {
    bool ret = CoolPropPINVOKE.disable_TTSE_LUT(FluidName);
    return ret;
  }

  public static bool enable_TTSE_LUT_writing(string FluidName) {
    bool ret = CoolPropPINVOKE.enable_TTSE_LUT_writing(FluidName);
    return ret;
  }

  public static bool isenabled_TTSE_LUT_writing(string FluidName) {
    bool ret = CoolPropPINVOKE.isenabled_TTSE_LUT_writing(FluidName);
    return ret;
  }

  public static bool disable_TTSE_LUT_writing(string FluidName) {
    bool ret = CoolPropPINVOKE.disable_TTSE_LUT_writing(FluidName);
    return ret;
  }

  public static bool set_TTSESat_LUT_size(string FluidName, int arg1) {
    bool ret = CoolPropPINVOKE.set_TTSESat_LUT_size(FluidName, arg1);
    return ret;
  }

  public static bool set_TTSESinglePhase_LUT_size(string FluidName, int Np, int Nh) {
    bool ret = CoolPropPINVOKE.set_TTSESinglePhase_LUT_size(FluidName, Np, Nh);
    return ret;
  }

  public static bool set_TTSESinglePhase_LUT_range(string FluidName, double hmin, double hmax, double pmin, double pmax) {
    bool ret = CoolPropPINVOKE.set_TTSESinglePhase_LUT_range(FluidName, hmin, hmax, pmin, pmax);
    return ret;
  }

  public static bool get_TTSESinglePhase_LUT_range(string FluidName, SWIGTYPE_p_double hmin, SWIGTYPE_p_double hmax, SWIGTYPE_p_double pmin, SWIGTYPE_p_double pmax) {
    bool ret = CoolPropPINVOKE.get_TTSESinglePhase_LUT_range(FluidName, SWIGTYPE_p_double.getCPtr(hmin), SWIGTYPE_p_double.getCPtr(hmax), SWIGTYPE_p_double.getCPtr(pmin), SWIGTYPE_p_double.getCPtr(pmax));
    return ret;
  }

  public static int set_TTSE_mode(string FluidName, string Value) {
    int ret = CoolPropPINVOKE.set_TTSE_mode(FluidName, Value);
    return ret;
  }

  public static double HAProps(string OutputName, string Input1Name, double Input1, string Input2Name, double Input2, string Input3Name, double Input3) {
    double ret = CoolPropPINVOKE.HAProps(OutputName, Input1Name, Input1, Input2Name, Input2, Input3Name, Input3);
    return ret;
  }

  public static double HAProps_Aux(string OutputName, double T, double p, double W, string units) {
    double ret = CoolPropPINVOKE.HAProps_Aux(OutputName, T, p, W, units);
    return ret;
  }

  public static double IceProps(string Name, double T, double p) {
    double ret = CoolPropPINVOKE.IceProps(Name, T, p);
    return ret;
  }

  public static void UseVirialCorrelations(int flag) {
    CoolPropPINVOKE.UseVirialCorrelations(flag);
  }

  public static void UseIsothermCompressCorrelation(int flag) {
    CoolPropPINVOKE.UseIsothermCompressCorrelation(flag);
  }

  public static void UseIdealGasEnthalpyCorrelations(int flag) {
    CoolPropPINVOKE.UseIdealGasEnthalpyCorrelations(flag);
  }

  public static void HAHelp() {
    CoolPropPINVOKE.HAHelp();
  }

  public static int returnHumAirCode(string Code) {
    int ret = CoolPropPINVOKE.returnHumAirCode(Code);
    return ret;
  }

  public static double cair_sat(double T) {
    double ret = CoolPropPINVOKE.cair_sat(T);
    return ret;
  }

  public static readonly double M_PI = CoolPropPINVOKE.M_PI_get();
  public static readonly int COOLPROP_OK = CoolPropPINVOKE.COOLPROP_OK_get();
}
